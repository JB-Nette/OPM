import java.awt.geom.Point2D;
import org.micromanager.display.DisplayWindow;
import org.micromanager.MultiStagePosition;
import org.micromanager.SequenceSettings;
import org.micromanager.api.AcquisitionOptions;
import org.micromanager.data.Coords;
import org.micromanager.data.Datastore;
import org.micromanager.data.Image;
import org.micromanager.data.Metadata;
import org.micromanager.data.Metadata.MetadataBuilder;
import org.micromanager.data.SummaryMetadata;
import org.micromanager.data.SummaryMetadataBuilder;

import mmcorej.*;

import java.awt.geom.Point2D;
import java.lang.System;
import java.lang.Math;
import java.lang.String;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import ij.gui.GenericDialog;
import ij.ImagePlus;
import ij.ImageStack;
import ij.process.ImageProcessor;
import ij.process.FloatProcessor;

String setTigerCommand(String port,String command,boolean checkbusy) {

	String answer="";
	send_success=false;
	while (!send_success) {
		exception_occured=false;
		try {
			mmc.setSerialPortCommand(port, command, "\r");
		}
		catch (Exception ex) {
			print("1st send error. Wait, then try again.");
			mmc.sleep(100);
			send_success=false;
			exception_occured=true;
		}
		if (!exception_occured) {
			send_success=true;
		}

		send_success=false;
		exception_occured=false;
		try {
			answer = mmc.getSerialPortAnswer(port, "\r\n");
		}
		catch (Exception ex) {
			print("1st receive error. Wait, then try again.");
			mmc.sleep(100);
			send_success=false;
			exception_occured=true;
		}
		if (!exception_occured) {
			send_success=true;
		}
	}

	if (checkbusy) {
		answer="";
		send_success=false;
		
		while (!send_success) {
			exception_occured=false;
			try {
				mmc.setSerialPortCommand(port, "STATUS", "\r");
			}
			catch (Exception ex) {
				print("1st check send. Wait, then try again.");
				mmc.sleep(100);
				send_success=false;
				exception_occured=true;
			}
			if (!exception_occured) {
				send_success=true;
			}
		}

		send_success=false;
		exception_occured=false;
		
		try {
			answer = mmc.getSerialPortAnswer(port, "\r\n");
		}
		catch (Exception ex) {
			print("1st check receive. Wait, then try again.");
			mmc.sleep(100);
			send_success=false;
			exception_occured=true;
		}
		if (!exception_occured) {
			send_success=true;
		}
		
		while (!answer.matches("N")) {
			answer="";
			send_success=false;
			
			while (!send_success) {
				exception_occured=false;
				try {
					mmc.setSerialPortCommand(port, "STATUS", "\r");
				}
				catch (Exception ex) {
					print("Repeat check send. Wait, then try again.");
					mmc.sleep(100);
					send_success=false;
					exception_occured=true;
				}
				if (!exception_occured) {
					send_success=true;
				}
			}

			send_success=false;
			exception_occured=false;

			try {
				answer = mmc.getSerialPortAnswer(port, "\r\n");
			}
			catch (Exception ex) {
				print("Repeat check receive. Wait, then try again.");
				mmc.sleep(100);
				send_success=false;
				exception_occured=true;
			}
			if (!exception_occured) {
				send_success=true;
			}
		}
	}

	return answer;
}

float start_y = -3.0;														// (mm)
float start_x = 9.0;															// (mm)

port = "COM15";
command = "SPEED Y=.5";
answer = setTigerCommand(port,command,false);
print(answer);
print("Changing Y speed to fast.");
mmc.sleep(50);

command = "MOVE Y="+start_y*10000;
answer = setTigerCommand(port,command,true);
print(answer);
print("Moved Y axis to: "+start_y);
mmc.sleep(50);

command = "SPEED X=.5";
answer = setTigerCommand(port,command,false);
print(answer);
print("Changing X speed to fast.");
mmc.sleep(50);

command = "MOVE X="+start_x*10000;
answer = setTigerCommand(port,command,true);
print(answer);
print("Moved X axis to: "+start_x);
mmc.sleep(50);
